import json
import csv
import os

def get_nested_value(data, keys, default="Not_Found"):
    """
    Safely get nested values from a dictionary.
    If any key in the path is missing, return the default value.
    """
    current = data
    for key in keys:
        if isinstance(current, dict) and key in current:
            current = current[key]
        elif isinstance(current, list) and isinstance(key, int) and 0 <= key < len(current):
            current = current[key]
        else:
            return default

    # Handle empty strings
    if current == "":
        return default

    return current

def json_to_csv(json_file_path, csv_file_path):
    # Read the JSON data
    try:
        with open(json_file_path, 'r') as json_file:
            data = json.load(json_file)
    except FileNotFoundError:
        print(f"Error: File '{json_file_path}' not found.")
        return
    except json.JSONDecodeError:
        print(f"Error: File '{json_file_path}' contains invalid JSON.")
        return

    # Define CSV headers based on the structure
    headers = [
        'index',
        'api_id',
        'method',
        'path',
        'provider_id',
        'provider_name',
        'provider_team_name',
        'provider_team_email',
        'provider_team_slack',
        'consumer_count',
        'approved_consumer_count',
        'consumer_ids'
    ]

    # Write to CSV
    with open(csv_file_path, 'w', newline='') as csv_file:
        writer = csv.writer(csv_file)
        writer.writerow(headers)

        # Process each item in the JSON
        for key, item in data.items():
            # Get values with default "Not_Found" for missing keys
            api_id = get_nested_value(item, ['_id', '$oid'])
            method = get_nested_value(item, ['method'])
            path = get_nested_value(item, ['path'])
            provider_id = get_nested_value(item, ['provider', '$oid'])

            # Provider info might be a list with multiple entries
            provider_info = item.get('provider_info', [])
            provider_name = "Not_Found"
            provider_team_name = "Not_Found"
            provider_team_email = "Not_Found"
            provider_team_slack = "Not_Found"

            if provider_info and len(provider_info) > 0:
                provider_name = get_nested_value(provider_info[0], ['name'])
                provider_team_name = get_nested_value(provider_info[0], ['team', 'name'])
                provider_team_email = get_nested_value(provider_info[0], ['team', 'email'])
                provider_team_slack = get_nested_value(provider_info[0], ['team', 'slack'])

            # Count consumers and approved consumers
            consumers = item.get('consumers', [])
            consumer_count = len(consumers)
            approved_consumer_count = sum(1 for c in consumers if c.get('approved', False))

            # Get consumer IDs as a comma-separated string
            consumer_ids = []
            for consumer in consumers:
                consumer_id = get_nested_value(consumer, ['consumer', '$oid'])
                if consumer_id != "Not_Found":
                    consumer_ids.append(consumer_id)

            consumer_ids_str = ",".join(consumer_ids) if consumer_ids else "Not_Found"

            row = [
                key,
                api_id,
                method,
                path,
                provider_id,
                provider_name,
                provider_team_name,
                provider_team_email,
                provider_team_slack,
                consumer_count,
                approved_consumer_count,
                consumer_ids_str
            ]
            writer.writerow(row)

    print(f"CSV file created successfully at: {os.path.abspath(csv_file_path)}")

# Main execution
if __name__ == "__main__":
    json_file_path = 'chintu.json'
    csv_file_path = 'chintu.csv'

    json_to_csv(json_file_path, csv_file_path)

    # Display the CSV content if successful
    try:
        with open(csv_file_path, 'r') as f:
            print("\nCSV Content:")
            print(f.read())
    except FileNotFoundError:
        pass  # CSV file wasn't created, error already reported
