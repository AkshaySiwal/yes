process_account_buckets() {
    local account=\$1
    local current_time=$(date +'%Y-%m-%d %H:%M:%S')
    
    log_message "INFO" "Analyzing S3 buckets for account: $account"
    
    local buckets
    if ! buckets=$(aws s3api list-buckets --query 'Buckets[*].Name' --output json 2>/dev/null); then
        log_message "ERROR" "Failed to list buckets in account $account"
        return 1
    fi

    # Get all CloudTrail trails first
    local trails
    if ! trails=$(aws cloudtrail list-trails --query 'Trails[*].Name' --output json 2>/dev/null); then
        log_message "ERROR" "Failed to list CloudTrail trails in account $account"
        return 1
    fi

    echo "$buckets" | jq -r '.[]' | while read -r bucket; do
        [ -z "$bucket" ] && continue
        
        log_message "INFO" "Checking bucket: $bucket"
        
        local has_tags=false
        local has_object_logging=false
        
        # Check for tags first
        if aws s3api get-bucket-tagging --bucket "$bucket" &>/dev/null; then
            has_tags=true
        else
            echo "$account:$bucket:$current_time" >> "$BUCKETS_NO_TAGS"
        fi

        # Check for object-level logging in CloudTrail
        echo "$trails" | jq -r '.[]' | while read -r trail; do
            [ -z "$trail" ] && continue

            local trail_config
            trail_config=$(aws cloudtrail get-event-selectors --trail-name "$trail" 2>/dev/null)
            
            # Check if all S3 data events are logged
            if echo "$trail_config" | jq -r '.EventSelectors[].DataResources[] | 
                select(.Type=="AWS::S3::Object") | 
                .Values[] | 
                contains("arn:aws:s3:::*")' | grep -q "true"; then
                has_object_logging=true
                break
            fi

            # Check if specific bucket is logged
            if echo "$trail_config" | jq -r --arg bucket "$bucket" '.EventSelectors[].DataResources[] | 
                select(.Type=="AWS::S3::Object") | 
                .Values[] | 
                contains($bucket)' | grep -q "true"; then
                has_object_logging=true
                break
            fi

            # Check advanced event selectors
            local advanced_config
            advanced_config=$(aws cloudtrail get-advanced-event-selectors --trail-name "$trail" 2>/dev/null)
            
            if echo "$advanced_config" | jq -r --arg bucket "$bucket" '
                .AdvancedEventSelectors[] | 
                select(
                    (.FieldSelectors[] | select(.Field=="eventCategory" and .Equals[]=["Data"])) and
                    (.FieldSelectors[] | select(.Field=="resources.type" and .Equals[]=["AWS::S3::Object"])) and
                    (.FieldSelectors[] | select(.Field=="resources.ARN" and (
                        .StartsWith[]=["arn:aws:s3:::*"] or
                        .StartsWith[]=["arn:aws:s3:::'$bucket'"]
                    )))
                )' | grep -q "."; then
                has_object_logging=true
                break
            fi
        done

        # Only add to logging list if bucket has tags
        if [ "$has_object_logging" = "true" ] && [ "$has_tags" = "true" ]; then
            echo "$account:$bucket:$current_time" >> "$BUCKETS_WITH_LOGGING"
        fi

        # Store complete bucket info regardless of status
        echo "$account:$bucket:$has_tags:$has_object_logging:$current_time" >> "$ALL_BUCKETS_INFO"
    done
}




==


check_advanced_selectors() {
    local advanced_config="\$1"
    local bucket="\$2"
    local bucket_arn="arn:aws:s3:::${bucket}"
    
    echo "DEBUG: Processing bucket: $bucket" >&2
    echo "DEBUG: Advanced config: $advanced_config" >&2
    
    echo "$advanced_config" | jq -r --arg bucket "$bucket_arn" '
        .AdvancedEventSelectors // [] | map(
            select(
                .FieldSelectors | any(
                    .Field == "eventCategory" and 
                    (.Equals | index("Data"))
                ) and any(
                    .Field == "resources.type" and 
                    (.Equals | index("AWS::S3::Object"))
                ) and any(
                    .Field == "resources.ARN" and 
                    ((.StartsWith | index("arn:aws:s3:::*")) or (.StartsWith | index($bucket)))
                )
            )
        ) | length > 0
    '
}
Let's modify the main function to include debug logging:
bash
Copy Code
process_account_buckets() {
    local account=\$1
    local current_time=$(date +'%Y-%m-%d %H:%M:%S')
    
    log_message "INFO" "Analyzing S3 buckets for account: $account"
    
    # ... (previous code remains the same until the trail checking loop)

    echo "$trails" | jq -r '.[]' | while read -r trail; do
        [ -z "$trail" ] && continue

        log_message "DEBUG" "Checking trail: $trail"
        
        # Get advanced event selectors with error checking
        local advanced_config
        if ! advanced_config=$(aws cloudtrail get-advanced-event-selectors --trail-name "$trail" 2>/dev/null); then
            log_message "WARNING" "Failed to get advanced event selectors for trail: $trail"
            continue
        fi

        log_message "DEBUG" "Advanced config retrieved: $advanced_config"
        
        if [ "$(check_advanced_selectors "$advanced_config" "$bucket")" = "true" ]; then
            log_message "INFO" "Found object logging for bucket: $bucket in trail: $trail"
            has_object_logging=true
            break
        fi
    done
    
    # ... (rest of the code remains the same)
}
