// Jenkinsfile
def getReactiveParams() {
    return [
        choice(
            name: 'CONFIGURATION_METHOD',
            choices: ['', 'Upload CSV File', 'Manual Entry'],
            description: 'Select how you want to provide Account and Role information'
        ),
        [$class: 'DynamicReferenceParameter',
            choiceType: 'ET_FORMATTED_HTML',
            name: 'ooo',
            referencedParameters: 'CONFIGURATION_METHOD',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [classpath: [], sandbox: true, script: 'return ""'],
                script: [
                    classpath: [], 
                    sandbox: true,
                    script: '''
                        if (CONFIGURATION_METHOD == 'Manual Entry') {
                            return """
                                <div class='form-group'>
                                    <label class='control-label' style='display: block; font-weight: bold; margin-bottom: 5px;'>
                                        Account <span style='color: #FF0000;'>*</span>
                                    </label>
                                    <div style='font-size: 12px; color: #666; margin-top: 5px;'>
                                        Enter the Account ID for manual configuration
                                    </div>
                                    <input type='text' 
                                           class='setting-input' 
                                           name='value' 
                                           placeholder='Enter Account ID'
                                           style='width: 300px; padding: 5px;'
                                           required>
                                </div>
                            """
                        }
                        return ""
                    '''
                ]
            ]
        ],
        [$class: 'DynamicReferenceParameter',
            choiceType: 'ET_FORMATTED_HTML',
            name: '',
            referencedParameters: 'CONFIGURATION_METHOD',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [classpath: [], sandbox: true, script: 'return ""'],
                script: [
                    classpath: [], 
                    sandbox: true,
                    script: '''
                        if (CONFIGURATION_METHOD == 'Manual Entry') {
                            return """
                                <div class='form-group'>
                                    <label class='control-label' style='display: block; font-weight: bold; margin-bottom: 5px;'>
                                        Role <span style='color: #FF0000;'>*</span>
                                    </label>
                                    <div style='font-size: 12px; color: #666; margin-top: 5px;'>
                                        Enter the Role Name for manual configuration
                                    </div>
                                    <input type='text' 
                                           class='setting-input' 
                                           name='value' 
                                           placeholder='Enter Role Name'
                                           style='width: 300px; padding: 5px;'
                                           required>
                                </div>                                
                            """
                        }
                        return ""
                    '''
                ]
            ]
        ],
        [$class: 'DynamicReferenceParameter',
            choiceType: 'ET_FORMATTED_HTML',
            name: '',
            referencedParameters: 'CONFIGURATION_METHOD',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [classpath: [], sandbox: true, script: 'return ""'],
                script: [
                    classpath: [], 
                    sandbox: true,
                    script: '''
                        if (CONFIGURATION_METHOD == 'Upload CSV File') {
                            return """
                                <div class='form-group'>
                                    <label class='control-label' style='display: block; font-weight: bold; margin-bottom: 5px;'>
                                        Upload CSV File <span style='color: #FF0000;'>*</span>
                                    </label>
                                    <div style='font-size: 12px; color: #666; margin-top: 5px;'>
                                        Please upload a CSV file with the following format:
                                        <ul style='margin-top: 5px; margin-bottom: 10px;'>
                                            <li>First column: AWS Account ID (12 digits)</li>
                                            <li>Second column: IAM Role name</li>
                                        </ul>
                                        Example:
                                        <pre style='background: #f5f5f5; padding: 8px; margin-top: 5px; border-radius: 4px;'>
123456789012,role1
123456789012,role2
987654321098,role1</pre>
                                    </div>
                                    <input type='file' 
                                           class='setting-input' 
                                           name='value'
                                           accept='.csv'
                                           style='width: 100%; max-width: 400px; padding: 8px; border: 1px solid #ccc; border-radius: 4px;'
                                           required>
                                </div>
                            """
                        }
                        return ""
                    '''
                ]
            ]
        ]
    ]
}

properties([
    parameters(getReactiveParams())
])

pipeline {
    agent any
  
    options {
        disableConcurrentBuilds()
    }
  
    stages {
        stage('Parameter Validation') {
            steps {
                script {
                    if (!params.CONFIGURATION_METHOD) {
                        currentBuild.result = 'SUCCESS'
                        return
                    }
                    sh 'printenv | sort'  
                    if (params.CONFIGURATION_METHOD == 'Manual Entry') {
                        if (!params.ACCOUNT?.trim() || !params.ROLE?.trim()) {
                            error "Account and Role are required for Manual selection"
                        }
                        echo "Running in Manual mode with Account: ${params.ACCOUNT} and Role: ${params.ROLE}"
                    } else if (params.CONFIGURATION_METHOD == 'Upload CSV File') {
                        if (!params.INPUT_FILE) {
                            error "File is required for File selection"
                        }
                        echo "Running in File mode with uploaded file"
                    }
                }
            }
        }
      
        stage('Run Python Script') {
            when {
                expression { params.CONFIGURATION_METHOD != '' }
            }
            steps {
                script {
                    writeFile file: 'script.py', text: '''
import os
print(os.environ())
def main():
    config_method = os.environ.get('CONFIGURATION_METHOD')
  
    if config_method == 'Manual Entry':
        account = os.environ.get('ACCOUNT')
        role = os.environ.get('ROLE')
        print(f"Running in Manual mode with Account: {account} and Role: {role}")
      
    elif config_method == 'Upload CSV File':
        file_path = os.environ.get('FILE_PATH')
        print(f"Running in File mode with file: {file_path}")
        with open(file_path, 'r') as file:
            content = file.read()
            print(f"File content: {content}")

if __name__ == "__main__":
    main()
'''
                  
                    withEnv([
                        "CONFIGURATION_METHOD=${params.CONFIGURATION_METHOD}",
                        "ACCOUNT=${params.ACCOUNT ?: ''}",
                        "ROLE=${params.ROLE ?: ''}",
                        "FILE_PATH=${params.INPUT_FILE ?: ''}"
                    ]) {
                        sh 'python3 script.py'
                    }
                }
            }
        }
    }
}
