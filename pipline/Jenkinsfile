pipeline {
    agent any
    
    parameters {
        choice(
            name: 'CONFIGURATION_METHOD',
            choices: ['Select Configuration Method', 'File Upload', 'Manual Entry'],
            description: 'Select how you want to provide the configuration'
        )
        
        [$class: 'DynamicReferenceParameter',
            choiceType: 'ET_FORMATTED_HTML',
            name: 'FILE_UPLOAD',
            referencedParameters: 'CONFIGURATION_METHOD',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [classpath: [], sandbox: true, script: 'return ""'],
                script: [
                    classpath: [], 
                    sandbox: true,
                    script: '''
                        def hideStyles = """
                            <style>
                                [name='FILE_UPLOAD'] { position: absolute !important; opacity: 0 !important; }
                                [name='FILE_UPLOAD'] + * { display: none !important; }
                                .setting-name, .setting-main { display: none !important; }
                            </style>
                        """
                        
                        if (CONFIGURATION_METHOD == 'File Upload') {
                            return hideStyles + """
                                <div class='form-group' style='margin-left: -180px;'>
                                    <label class='control-label' style='display: block; font-weight: bold; margin-bottom: 5px;'>
                                        Configuration File <span style='color: #FF0000;'>*</span>
                                    </label>
                                    <div style='font-size: 12px; color: #666; margin-bottom: 10px;'>
                                        Upload CSV file with format:<br>
                                        Account,Role<br>
                                        123456789,Admin<br>
                                        987654321,User
                                    </div>
                                    <input type='file' 
                                           class='setting-input'
                                           name='value'
                                           accept='.csv'
                                           style='width: 300px;'
                                           required>
                                </div>
                            """
                        }
                        return hideStyles
                    '''
                ]
            ]
        ],
        
        [$class: 'DynamicReferenceParameter',
            choiceType: 'ET_FORMATTED_HTML',
            name: 'HIDDEN_ACCOUNT',
            referencedParameters: 'CONFIGURATION_METHOD',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [classpath: [], sandbox: true, script: 'return ""'],
                script: [
                    classpath: [], 
                    sandbox: true,
                    script: '''
                        def hideStyles = """
                            <style>
                                [name='HIDDEN_ACCOUNT'] { position: absolute !important; opacity: 0 !important; }
                                [name='HIDDEN_ACCOUNT'] + * { display: none !important; }
                                .setting-name, .setting-main { display: none !important; }
                            </style>
                        """
                        
                        if (CONFIGURATION_METHOD == 'Manual Entry') {
                            return hideStyles + """
                                <div class='form-group' style='margin-left: -180px;'>
                                    <label class='control-label' style='display: block; font-weight: bold; margin-bottom: 5px;'>
                                        Account <span style='color: #FF0000;'>*</span>
                                    </label>
                                    <div style='font-size: 12px; color: #666; margin-bottom: 10px;'>
                                        Enter the AWS Account ID (12 digits)
                                    </div>
                                    <input type='text' 
                                           class='setting-input' 
                                           name='value'
                                           pattern='[0-9]{12}'
                                           placeholder='123456789012'
                                           style='width: 300px;'
                                           required>
                                </div>
                            """
                        }
                        return hideStyles
                    '''
                ]
            ]
        ],
        
        [$class: 'DynamicReferenceParameter',
            choiceType: 'ET_FORMATTED_HTML',
            name: 'HIDDEN_ROLE',
            referencedParameters: 'CONFIGURATION_METHOD',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [classpath: [], sandbox: true, script: 'return ""'],
                script: [
                    classpath: [], 
                    sandbox: true,
                    script: '''
                        def hideStyles = """
                            <style>
                                [name='HIDDEN_ROLE'] { position: absolute !important; opacity: 0 !important; }
                                [name='HIDDEN_ROLE'] + * { display: none !important; }
                                .setting-name, .setting-main { display: none !important; }
                            </style>
                        """
                        
                        if (CONFIGURATION_METHOD == 'Manual Entry') {
                            return hideStyles + """
                                <div class='form-group' style='margin-left: -180px;'>
                                    <label class='control-label' style='display: block; font-weight: bold; margin-bottom: 5px;'>
                                        Role <span style='color: #FF0000;'>*</span>
                                    </label>
                                    <div style='font-size: 12px; color: #666; margin-bottom: 10px;'>
                                        Enter the IAM Role name
                                    </div>
                                    <input type='text' 
                                           class='setting-input' 
                                           name='value'
                                           placeholder='AdminRole'
                                           style='width: 300px;'
                                           required>
                                </div>
                            """
                        }
                        return hideStyles
                    '''
                ]
            ]
        ]
    }

    stages {
        stage('Validate Parameters') {
            steps {
                script {
                    // Validate configuration method selection
                    if (params.CONFIGURATION_METHOD == 'Select Configuration Method') {
                        error "Please select a valid configuration method"
                    }
                    
                    // Store configuration method for later use
                    env.CONFIG_METHOD = params.CONFIGURATION_METHOD
                    
                    if (params.CONFIGURATION_METHOD == 'Manual Entry') {
                        // Validate manual entry parameters
                        def accountValue = params.HIDDEN_ACCOUNT
                        def roleValue = params.HIDDEN_ROLE
                        
                        if (!accountValue?.trim()) {
                            error "Account ID is required for Manual Entry"
                        }
                        if (!accountValue.matches(/^\d{12}$/)) {
                            error "Invalid Account ID format. Must be 12 digits."
                        }
                        if (!roleValue?.trim()) {
                            error "Role is required for Manual Entry"
                        }
                        
                        // Store validated values
                        env.ACCOUNT_ID = accountValue
                        env.ROLE_NAME = roleValue
                        
                        echo "Manual Entry - Account: ${env.ACCOUNT_ID}, Role: ${env.ROLE_NAME}"
                    }
                    else if (params.CONFIGURATION_METHOD == 'File Upload') {
                        // Validate file upload
                        def fileContent = params.FILE_UPLOAD
                        if (!fileContent?.trim()) {
                            error "Configuration file is required for File Upload"
                        }
                        
                        // Store file content
                        env.CONFIG_FILE = fileContent
                        echo "File Upload - Processing configuration file"
                    }
                }
            }
        }
        
        stage('Process Configuration') {
            steps {
                script {
                    if (env.CONFIG_METHOD == 'Manual Entry') {
                        // Process manual entry
                        echo "Processing manual configuration..."
                        // Add your processing logic here
                    }
                    else if (env.CONFIG_METHOD == 'File Upload') {
                        // Process file
                        echo "Processing configuration file..."
                        // Add your file processing logic here
                    }
                }
            }
        }
        
        stage('Execute Tasks') {
            steps {
                script {
                    echo "Executing tasks with configuration..."
                    // Add your main execution logic here
                }
            }
        }
    }
    
    post {
        success {
            echo "Pipeline completed successfully"
        }
        failure {
            echo "Pipeline failed"
        }
        always {
            // Cleanup if needed
            cleanWs()
        }
    }
}
