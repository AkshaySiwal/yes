// Jenkinsfile
def getReactiveParams() {
    return [
        
        choice(
            name: 'TASK',
            choices: ['Backup', 'Backup and Delete'],
            description: 'Select the task to perform'
        ),
        choice(
            name: 'CONFIGURATION_METHOD',
            choices: ['', 'Upload CSV File', 'Manual Entry'],
            description: 'Select how you want to provide Account and Role information'
        ),
        [$class: 'DynamicReferenceParameter',
            choiceType: 'ET_FORMATTED_HTML',
            name: 'Account',
            referencedParameters: 'CONFIGURATION_METHOD',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [classpath: [], sandbox: true, script: 'return ""'],
                script: [
                    classpath: [], 
                    sandbox: true,
                    script: '''
                        if (CONFIGURATION_METHOD == 'Manual Entry') {
                            return """
                                <div class='form-group'>
                                    <input type='text' 
                                           class='setting-input' 
                                           name='value'
                                           placeholder='Enter Account ID'
                                           style='width: 300px; padding: 5px;'
                                           required>
                                </div>
                            """
                        }
                        return "NA"
                    '''
                ]
            ]
        ],
        [$class: 'DynamicReferenceParameter',
            choiceType: 'ET_FORMATTED_HTML',
            name: 'Role',
            referencedParameters: 'CONFIGURATION_METHOD',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [classpath: [], sandbox: true, script: 'return ""'],
                script: [
                    classpath: [], 
                    sandbox: true,
                    script: '''
                        if (CONFIGURATION_METHOD == 'Manual Entry') {
                            return """
                                <div class='form-group'>
                                    <input type='text' 
                                           class='setting-input' 
                                           name='value' 
                                           placeholder='Enter Role Name'
                                           style='width: 300px; padding: 5px;'
                                           required>
                                </div>                                
                            """
                        }
                        return "NA"
                    '''
                ]
            ]
        ],
        [$class: 'DynamicReferenceParameter',
            choiceType: 'ET_FORMATTED_HTML',
            name: 'File',
            referencedParameters: 'CONFIGURATION_METHOD',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [classpath: [], sandbox: true, script: 'return ""'],
                script: [
                    classpath: [], 
                    sandbox: true,
                    script: '''
                        if (CONFIGURATION_METHOD == 'Upload CSV File') {
                            return """
                                <div class='form-group'>
                                    <label class='control-label' style='display: block; font-weight: bold; margin-bottom: 5px;'>
                                        Upload CSV File <span style='color: #FF0000;'>*</span>
                                    </label>
                                    <div style='font-size: 12px; color: #666; margin-top: 5px;'>
                                        Please upload a CSV file with the following format:
                                        <ul style='margin-top: 5px; margin-bottom: 10px;'>
                                            <li>First column: AWS Account ID (12 digits)</li>
                                            <li>Second column: IAM Role name</li>
                                        </ul>
                                        Example:
                                        <pre style='background: #f5f5f5; padding: 8px; margin-top: 5px; border-radius: 4px;'>
123456789012,role1
123456789012,role2
987654321098,role1</pre>
                                    </div>
                                    <input type='file' 
                                           class='setting-input' 
                                           name='value'
                                           accept='.csv'
                                           style='width: 100%; max-width: 400px; padding: 8px; border: 1px solid #ccc; border-radius: 4px;'
                                           required>
                                </div>
                            """
                        }
                        return "NA"
                    '''
                ]
            ]
        ]
    ]
}

properties([
    parameters(getReactiveParams())
])

pipeline {
    agent {
        docker {
       alwayspull true
       image "artifactory.abc.net/cia-internal/cenkins/terraform:live"
       label "terraform-prod"
       args "--net host -v /home/operation/.ssh:/home/operation/.ssh"
       } 
    }
  
    options {
        disableConcurrentBuilds()
    }
  
    stages {
        stage('Parameter Validation') {
            steps {
                script {
                    if (!params.CONFIGURATION_METHOD) {
                        currentBuild.result = 'SUCCESS'
                        return
                    }

                    // Map for task values
                    def taskMap = [
                        'Backup': 'backup',
                        'Backup and Delete': 'delete'
                    ]
                    
                    // Get the task value from the map
                    def taskValue = taskMap[params.TASK]
                    if (!taskValue) {
                        error "Invalid task selected"
                    }

                    if (params.CONFIGURATION_METHOD == 'Manual Entry') {
                        if (!params.Account?.trim() || !params.Role?.trim()) {
                            error "Account and Role are required for Manual selection"
                        }
                        echo "Running in Manual mode with Account: ${params.Account} and Role: ${params.Role}"
                        echo "Selected task: ${params.TASK} (${taskValue})"
                    } else if (params.CONFIGURATION_METHOD == 'Upload CSV File') {
                        if (!params.File) {
                            error "File is required for File selection"
                        }
                        echo "Running in File mode with uploaded file"
                        echo "Selected task: ${params.TASK} (${taskValue})"
                    }
                }
            }
        }
      
        stage('Run Python Script') {
            when {
                expression { params.CONFIGURATION_METHOD != '' }
            }
            steps {
                script {
                    def taskMap = [
                        'Backup': 'backup',
                        'Backup and Delete': 'delete'
                    ]
                    
                    withEnv([
                        "CONFIGURATION_METHOD=${params.CONFIGURATION_METHOD}",
                        "Account=${params.Account ?: ''}",
                        "Role=${params.Role ?: ''}",
                        "File=${params.File ?: ''}",
                        "TASK=${taskMap[params.TASK]}"
                    ]) {
                        sh 'python3 script.py'
                    }
                }
            }
        }
    }
}


---



[$class: 'FileParameter',
    name: 'File',
    description: 'Upload CSV file containing Account IDs and Role names'
],
[$class: 'DynamicReferenceParameter',
    choiceType: 'ET_FORMATTED_HTML',
    name: 'FILE_INSTRUCTIONS',
    referencedParameters: 'CONFIGURATION_METHOD',
    script: [
        $class: 'GroovyScript',
        fallbackScript: [classpath: [], sandbox: true, script: 'return ""'],
        script: [
            classpath: [], 
            sandbox: true,
            script: '''
                if (CONFIGURATION_METHOD == 'Upload CSV File') {
                    return """
                        <div class='form-group'>
                            <label class='control-label' style='display: block; font-weight: bold; margin-bottom: 5px;'>
                                CSV File Format <span style='color: #FF0000;'>*</span>
                            </label>
                            <div style='font-size: 12px; color: #666; margin-top: 5px;'>
                                <ul style='margin-top: 5px; margin-bottom: 10px;'>
                                    <li>First column: AWS Account ID (12 digits)</li>
                                    <li>Second column: IAM Role name</li>
                                </ul>
                                Example:
                                <pre style='background: #f5f5f5; padding: 8px; margin-top: 5px; border-radius: 4px;'>
123456789012,role1
123456789012,role2
987654321098,role1</pre>
                            </div>
                            <script>
                                (function() {
                                    try {
                                        var fileInput = document.querySelector('input[name="File"]');
                                        if (fileInput && fileInput.parentElement) {
                                            fileInput.parentElement.style.display = 'block';
                                            fileInput.setAttribute('accept', '.csv');
                                            fileInput.style.width = '100%';
                                            fileInput.style.maxWidth = '400px';
                                            fileInput.style.padding = '8px';
                                            fileInput.style.border = '1px solid #ccc';
                                            fileInput.style.borderRadius = '4px';
                                        }
                                    } catch (e) {
                                        console.error('Error configuring file input:', e);
                                    }
                                })();
                            </script>
                        </div>
                    """
                }
                return """
                    <script>
                        (function() {
                            try {
                                var fileInput = document.querySelector('input[name="File"]');
                                if (fileInput && fileInput.parentElement) {
                                    fileInput.parentElement.style.display = 'none';
                                }
                            } catch (e) {
                                console.error('Error hiding file input:', e);
                            }
                        })();
                    </script>
                """
            '''
        ]
    ]
]




====


    def getReactiveParams() {
    def params = [
        choice(
            name: 'TASK',
            choices: ['Backup', 'Backup and Delete'],
            description: 'Select the task to perform'
        ),
        choice(
            name: 'CONFIGURATION_METHOD',
            choices: ['', 'Upload CSV File', 'Manual Entry'],
            description: 'Select how you want to provide Account and Role information'
        )
    ]

    // Add Account and Role parameters for Manual Entry
    params.add([$class: 'DynamicReferenceParameter',
        choiceType: 'ET_FORMATTED_HTML',
        name: 'Account',
        referencedParameters: 'CONFIGURATION_METHOD',
        script: [
            $class: 'GroovyScript',
            fallbackScript: [classpath: [], sandbox: true, script: 'return ""'],
            script: [
                classpath: [], 
                sandbox: true,
                script: '''
                    if (CONFIGURATION_METHOD == 'Manual Entry') {
                        return """
                            <div class='form-group'>
                                <input type='text' 
                                       class='setting-input' 
                                       name='value'
                                       placeholder='Enter Account ID'
                                       style='width: 300px; padding: 5px;'
                                       required>
                            </div>
                        """
                    }
                    return "NA"
                '''
            ]
        ]
    ])

    params.add([$class: 'DynamicReferenceParameter',
        choiceType: 'ET_FORMATTED_HTML',
        name: 'Role',
        referencedParameters: 'CONFIGURATION_METHOD',
        script: [
            $class: 'GroovyScript',
            fallbackScript: [classpath: [], sandbox: true, script: 'return ""'],
            script: [
                classpath: [], 
                sandbox: true,
                script: '''
                    if (CONFIGURATION_METHOD == 'Manual Entry') {
                        return """
                            <div class='form-group'>
                                <input type='text' 
                                       class='setting-input' 
                                       name='value' 
                                       placeholder='Enter Role Name'
                                       style='width: 300px; padding: 5px;'
                                       required>
                            </div>                                
                        """
                    }
                    return "NA"
                '''
            ]
        ]
    ])

    // Add File parameter for Upload CSV File
    params.add([$class: 'FileParameterDefinition',
        name: 'File',
        description: '''Please upload a CSV file with the following format:
- First column: AWS Account ID (12 digits)
- Second column: IAM Role name

Example:
123456789012,role1
123456789012,role2
987654321098,role1'''])

    return params
}
